clc
clear

mu(:,1) = [-2; 0];
mu(:,2) = [2; 0];
Sigma(:,:,1) = [ 1 -0.9; -0.9, 2 ]; 
Sigma(:,:,2) = [ 2 0.9; 0.9, 1 ]; 
prior = [0.9,0.1]; % class priors for labels 0 and 1 respectively

% loading our validation dataset. 
% This is generated by 'sample_generation_P1.m'
% Please run the above script first before running this script
load('D_10000_validate.mat');
Nc = [length(find(label_D_10000_validate==0)),length(find(label_D_10000_validate==1))]; % number of samples from each class

%% ===========================  dataset is divided into different lists based on class label  ======================= %%
N = sum(Nc);
c0_data = [];
c1_data = [];
for i = 1 : N
    if label_D_10000_validate(i) == 0
        c0_data = [c0_data; D_10000_validate(:, i)'];
    end
    if label_D_10000_validate(i) == 1
        c1_data = [c1_data; D_10000_validate(:, i)'];
    end
end
%% =========================== Valiation dataset plot  ======================= %%
figure(1), clf,
plot(c0_data(:,1),c0_data(:,2),'o'), hold on,
plot(c1_data(:,1),c1_data(:,2),'+'), axis equal,
legend('Class 0','Class 1'), 
title('Data and their true labels'),
xlabel('x_1'), ylabel('x_2'), 

%% ======= likelihood function and discriminant function to classify =====%%
liklihood = @(x,class) mvnpdf(x, mu(:, class), Sigma(:,:,class));
cost = [0,1,1;1,0,1;1,1,0];
gamma = (cost(2,1)-cost(1,1))/(cost(1,2)-cost(2,2)) * prior(1)/prior(2);
discriminantScore = @(x) liklihood(x,2)/ liklihood(x,1);


%% ======= Classification based on a range of gamma values =====%%
% this section is likely to run longer.
TP = [];
FP = [];
% g = 9;

min_error = [];
tpr_at_min_error = [];
fpr_at_min_error = [];
threshold_at_min_error = [];

for g = 0:0.5:1000
    %classifying class 0 dataset
    c0_classified_as_c0 = [];
    c0_classified_as_c1 = [];

    for i = 1 : 1 : Nc(1)
        label = discriminantScore(c0_data(i, :)') >= g;

        if label == 0
            c0_classified_as_c0 = [c0_classified_as_c0; (c0_data(i, :)) ];
        end

        if label == 1
            c0_classified_as_c1 = [c0_classified_as_c1; (c0_data(i, :)) ];
        end

    end

    %classifying class 1 dataset
    c1_classified_as_c0 = [];
    c1_classified_as_c1 = [];
    for i = 1 : 1 : Nc(2)
        label = discriminantScore(c1_data(i, :)') > g;

        if label == 0
            c1_classified_as_c0 = [c1_classified_as_c0; (c1_data(i, :)) ];
        end

        if label == 1
            c1_classified_as_c1 = [c1_classified_as_c1; (c1_data(i, :)) ];
        end

    end


    p_c1_given_c0 = size(c0_classified_as_c1,1) / size(c0_data, 1); %fp
    p_c1_given_c1 = size(c1_classified_as_c1,1) / size(c1_data, 1);
    
    error = (size(c1_classified_as_c0,1) + size(c0_classified_as_c1,1)) / N;
    
    if(isempty(min_error))
        min_error = error;
        threshold_at_min_error = g;
        tpr_at_min_error = p_c1_given_c1;
        fpr_at_min_error = p_c1_given_c0;
    elseif(error < min_error)
        min_error = error;
        tpr_at_min_error = p_c1_given_c1;
        fpr_at_min_error = p_c1_given_c0;
        threshold_at_min_error = g;
    end
    
    TP = [TP; p_c1_given_c1];
    FP = [FP; p_c1_given_c0];
    
%     figure(10);
%     plot(c0_classified_as_c0(:,1),c0_classified_as_c0(:,2), 'og');
%     hold on;
%     plot(c1_classified_as_c1(:,1), c1_classified_as_c1(:,2), '+g');
%     hold on;
%     plot(c0_classified_as_c1(:,1),c0_classified_as_c1(:,2), 'or');
%     hold on;
%     plot(c1_classified_as_c0(:,1),c1_classified_as_c0(:,2), '+r');
%     hold off;


end

%% ======= Plot ROC curve with min P(error) classifier's operating point ===== %%
figure(2);
plot( FP', TP');
axis equal;
ylabel('True Positive Rate'), xlabel('False Positive Rate');
title('ROC');
hold on;
plot( fpr_at_min_error, tpr_at_min_error, 'r*');

%% ===== Classifying based on theoretically determined gamma for min P(error) ===== %%
c0_classified_as_c0 = [];
c0_classified_as_c1 = [];

for i = 1 : 1 : Nc(1)
    label = discriminantScore(c0_data(i, :)') >= gamma;

    if label == 0
        c0_classified_as_c0 = [c0_classified_as_c0; (c0_data(i, :)) ];
    end

    if label == 1
        c0_classified_as_c1 = [c0_classified_as_c1; (c0_data(i, :)) ];
    end

end

%classifying class 1 dataset
c1_classified_as_c0 = [];
c1_classified_as_c1 = [];
for i = 1 : 1 : Nc(2)
    label = discriminantScore(c1_data(i, :)') > gamma;

    if label == 0
        c1_classified_as_c0 = [c1_classified_as_c0; (c1_data(i, :)) ];
    end

    if label == 1
        c1_classified_as_c1 = [c1_classified_as_c1; (c1_data(i, :)) ];
    end

end

%% ====== Plotting data after classification using min P(error) classifier ====== %%
decision_boundary = @(x1,x2) discriminantScore([x1, x2]')-gamma;

figure(3);
plot(c0_classified_as_c0(:,1),c0_classified_as_c0(:,2), 'og');
hold on;
plot(c1_classified_as_c1(:,1), c1_classified_as_c1(:,2), '+g');
hold on;
plot(c0_classified_as_c1(:,1),c0_classified_as_c1(:,2), 'or');
hold on;
plot(c1_classified_as_c0(:,1),c1_classified_as_c0(:,2), '+r');
hold on;
fimplicit(decision_boundary, [-10 10]);
hold on;
title('Data after classification'),
xlabel('x_1'), ylabel('x_2'), 
legend('Class0 classified as Class0', 'Class1 classified as Class1', 'Class0 classified as Class1', 'Class1 classified as Class0', 'Decision Boundary');
hold off;

